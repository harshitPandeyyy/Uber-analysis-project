create or replace table `uberdata.analytics_table` as (
select f.VendorID,
d.tpep_pickup_datetime,
d.tpep_dropoff_datetime,
p.passenger_count,
t.trip_distance,
r.rate_code_name,
pick.pickup_latitude,
pick.pickup_longitude,
drop.dropoff_latitude,
drop.dropoff_longitude,
pay.payment_type_name,
f.fare_amount,
f.extra,
f.mta_tax,
f.tip_amount,
f.tolls_amount,
f.total_amount,
f.improvement_surcharge,

from `uberdata.fact_table` f join 
`uberdata.datetime_dim` d on f.datetime_id = d.datetime_id
join `uberdata.passenger_count_dim` p on p.passenger_count_id = f.passenger_count_id
join `uberdata.trip_distance_dim` t on t.trip_distance_id = f.trip_distance_id
join  `uberdata.rate_code_dim` r on r.rate_code_id = f.rate_code_id
join `uberdata.pickup_location_dim` pick on pick.pickup_location_id = f.pickup_location_id
join `uberdata.dropoff_location_dim` drop on drop.dropoff_location_id = f.dropoff_location_id
join `uberdata.payment_type_dim` pay on pay.payment_type_id = f.payment_type_id)

-- here we created a new table using big querry for data visualization


-- average amount by each vendor--
select VendorID, avg(fare_amount) from `uberdata.fact_table`
group by VendorID;

-- type of payment with average tip amount--
select b.payment_type_name, avg(a.tip_amount) from `uberdata.fact_table` a
join `uberdata.payment_type_dim`  b
on a.payment_type_id = b.payment_type_id
group by b.payment_type_name;

--find the top 10 pickup locations based on the number of trips
select pickup_latitude, pickup_longitude , count(pickup_location_id) as no_of_trips from `uberdata.pickup_location_dim` 
group by pickup_latitude, pickup_longitude
order by no_of_trips
limit 10;
